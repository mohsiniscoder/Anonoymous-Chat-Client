{"ast":null,"code":"// Link Layer Protocols ========================================================\n\nexports.Ethernet = function (b, offset) {\n  offset || (offset = 0);\n  var i;\n  var ret = {\n    info: {\n      dstmac: '',\n      srcmac: '',\n      type: undefined,\n      vlan: undefined,\n      length: undefined\n    },\n    offset: undefined\n  };\n\n  // 32-bit Destination MAC Address\n  for (i = 0; i < 6; ++i) {\n    if (b[offset] < 16) ret.info.dstmac += '0';\n    ret.info.dstmac += b[offset++].toString(16);\n    if (i < 5) ret.info.dstmac += ':';\n  }\n\n  // 32-bit Source MAC Address\n  for (i = 0; i < 6; ++i) {\n    if (b[offset] < 16) ret.info.srcmac += '0';\n    ret.info.srcmac += b[offset++].toString(16);\n    if (i < 5) ret.info.srcmac += ':';\n  }\n  if (b[offset] === 0x81 && b[offset + 1] === 0x00) {\n    // VLAN tag\n    offset += 2;\n    ret.info.vlan = {\n      priority: b[offset] >> 0x1F,\n      CFI: (b[offset] & 0x10) > 0,\n      VID: ((b[offset] & 0x0F) << 8) + b[offset + 1]\n    };\n    offset += 2;\n  }\n\n  // 16-bit Type/Length\n  var typelen = b.readUInt16BE(offset, true);\n  if (typelen <= 1500) ret.info.length = typelen;else if (typelen >= 1536) ret.info.type = typelen;\n  ret.offset = offset + 2;\n  return ret;\n};\n\n// Internet Layer Protocols ====================================================\n\nexports.IPV4 = function (b, offset) {\n  offset || (offset = 0);\n  var origoffset = offset,\n    i;\n  var ret = {\n    info: {\n      hdrlen: undefined,\n      dscp: undefined,\n      ecn: undefined,\n      totallen: undefined,\n      id: undefined,\n      flags: undefined,\n      fragoffset: undefined,\n      ttl: undefined,\n      protocol: undefined,\n      hdrchecksum: undefined,\n      srcaddr: '',\n      dstaddr: '',\n      options: undefined\n    },\n    hdrlen: undefined,\n    offset: undefined\n  };\n\n  // 4-bit Version -- always value of 4 (skip)\n\n  // 4-bit Internet Header Length\n  ret.info.hdrlen = b[offset++] & 0x0F;\n\n  // 6-bit Differentiated Services Code Point\n  ret.info.dscp = (b[offset] & 0xFC) >> 2;\n\n  // 2-bit Explicit Congestion Notification\n  ret.info.ecn = b[offset++] & 0x03;\n\n  // 16-bit Total Length\n  ret.info.totallen = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Identification\n  ret.info.id = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 3-bit Flags\n  ret.info.flags = (b[offset] & 0xE0) >> 5;\n\n  // 13-bit Fragment Offset\n  ret.info.fragoffset = ((b[offset++] & 0x1F) << 8) + b[offset++];\n\n  // 8-bit Time to Live\n  ret.info.ttl = b[offset++];\n\n  // 8-bit Protocol\n  ret.info.protocol = b[offset++];\n\n  // 16-bit Header Checksum\n  ret.info.hdrchecksum = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 32-bit Source Address\n  for (i = 0; i < 4; ++i) {\n    ret.info.srcaddr += b[offset++];\n    if (i < 3) ret.info.srcaddr += '.';\n  }\n\n  // 32-bit Destination Address\n  for (i = 0; i < 4; ++i) {\n    ret.info.dstaddr += b[offset++];\n    if (i < 3) ret.info.dstaddr += '.';\n  }\n  if (ret.info.hdrlen > 5) {\n    // TODO: options\n  }\n  ret.hdrlen = ret.info.hdrlen * 4;\n  ret.offset = origoffset + ret.hdrlen;\n\n  // Check for zero total length due to TSO\n  if (ret.info.totallen === 0) ret.info.totallen = b.length - ret.offset + ret.hdrlen;\n  return ret;\n};\nvar IPV6_EXTENSIONS = {\n  0: 'Hop-by-Hop Options',\n  43: 'Routing',\n  44: 'Fragment',\n  50: 'Encapsulating Security Payload',\n  51: 'Authentication Header',\n  //59: 'No Next Header',\n  60: 'Destination Options',\n  135: 'Mobility'\n};\nexports.IPV6 = function (b, offset) {\n  offset || (offset = 0);\n  var i;\n  var ret = {\n    info: {\n      class: undefined,\n      flowLabel: undefined,\n      extensions: undefined,\n      protocol: undefined,\n      hopLimit: undefined,\n      srcaddr: '',\n      dstaddr: ''\n    },\n    payloadlen: undefined,\n    offset: undefined\n  };\n\n  // 4-bit Version -- always value of 6 (skip)\n\n  // 8-bit Traffic Class\n  ret.info.class = ((b[offset] & 0x0F) << 4) + ((b[++offset] & 0xF0) >> 4);\n\n  // 20-bit Flow Label\n  ret.info.flowLabel = ((b[offset] & 0x0F) << 16) + b.readUInt16BE(++offset, true);\n  offset += 2;\n\n  // 16-bit Payload Length\n  ret.info.payloadlen = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 8-bit Next Header\n  var nextHeader = b[offset++],\n    curHeader = nextHeader,\n    hdrExtLen;\n\n  // 8-bit Hop Limit\n  ret.info.hopLimit = b[offset++];\n\n  // 128-bit Source Address\n  for (i = 0; i < 16; ++i) {\n    if (b[offset] < 16) ret.info.srcaddr += '0';\n    ret.info.srcaddr += b[offset++].toString(16);\n    if (i < 15) ret.info.srcaddr += ':';\n  }\n\n  // 128-bit Destination Address\n  for (i = 0; i < 16; ++i) {\n    if (b[offset] < 16) ret.info.dstaddr += '0';\n    ret.info.dstaddr += b[offset++].toString(16);\n    if (i < 15) ret.info.dstaddr += ':';\n  }\n  while (IPV6_EXTENSIONS[curHeader] !== undefined) {\n    // TODO: parse extensions\n    if (curHeader === 0 || curHeader === 43 || curHeader === 60 || curHeader === 135) {\n      // Header Extension Length field is in 8-byte units\n      nextHeader = b[offset];\n      hdrExtLen = b[offset + 1];\n      offset += 8;\n      offset += 8 * hdrExtLen;\n    } else if (curHeader === 44) {\n      nextHeader = b[offset];\n      offset += 8;\n    } else if (curHeader === 51) {\n      // Payload Length field is in 4-byte units\n      // I believe this length already excludes the Next Header and Payload\n      // Length fields\n      nextHeader = b[offset++];\n      offset += 4 * b[offset];\n    }\n    curHeader = nextHeader;\n  }\n  if (curHeader !== 59) {\n    ret.info.protocol = curHeader;\n    ret.offset = offset;\n  }\n  return ret;\n};\nexports.ICMPV4 = function (b, nbytes, offset) {\n  offset || (offset = 0);\n  var type, code, checksum, i, j;\n  var ret = {\n    info: undefined,\n    offset: undefined\n  };\n\n  // 8-bit Type\n  type = b[offset++];\n\n  // 8-bit Code\n  code = b[offset++];\n\n  // 16-bit Header Checksum\n  checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n  var IPhdr, addr;\n  if (type === 0 || type === 15 || type === 16 || type === 37) {\n    // Echo reply / Information request / Information reply\n    // / Domain name request\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // For Echo reply, (Optional) data from `offset` to end ...\n  } else if (type === 3 && code === 4) {\n    // Destination unreachable with Next-hop MTU\n\n    offset += 2; // skip unused part\n\n    // 16-bit Next-hop MTU\n    var mtu = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      nextHopMTU: mtu,\n      IPHeader: {\n        info: IPhdr.info,\n        hdrlen: IPhdr.hdrlen\n      },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 3 || type === 4 || type === 11) {\n    // Destination unreachable (other) / Source quench / Time exceeded\n\n    offset += 4; // skip unused part\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      IPHeader: {\n        info: IPhdr.info,\n        hdrlen: IPhdr.hdrlen\n      },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 5) {\n    // Redirect\n\n    // 32-bit Redirected Gateway IP Address\n    addr = '';\n    for (i = 0; i < 4; ++i) {\n      addr += b[offset++];\n      if (i < 3) addr += '.';\n    }\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      gatewayAddr: addr,\n      IPHeader: {\n        info: IPhdr.info,\n        hdrlen: IPhdr.hdrlen\n      },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 12 || type === 31 || type === 40) {\n    // Parameter problem / Conversion error / Security failure\n\n    var ptr;\n    if (type === 12) {\n      // 8-bit Pointer\n      ptr = b[offset++];\n      offset += 3; // skip unused part\n    } else if (type === 31) {\n      // 32-bit Pointer\n      ptr = b.readUInt32BE(offset, true);\n      offset += 4;\n    } else {\n      offset += 2; // skip unused part\n      ptr = b.readUInt16BE(offset, true);\n      offset += 2;\n    }\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      pointer: ptr,\n      IPHeader: {\n        info: IPhdr.info,\n        hdrlen: IPhdr.hdrlen\n      },\n      dataOffset: offset\n    };\n    if (type === 12 || type === 40) {\n      // First 8 bytes of original datagram's data\n      offset += 8;\n    } else {\n      // First 256 bytes of original datagram's data\n      offset += 256;\n    }\n  } else if (type === 9) {\n    // Router advertisement\n\n    // 8-bit Number of Addresses\n    var nAddrs = b[offset++];\n\n    // 8-bit Address Entry Size (2 for ICMPv4)\n    var entrySize = b[offset++];\n\n    // 16-bit Lifetime\n    var lifetime = b.readUInt16BE(offset, true);\n    offset += 2;\n    var addrs;\n    if (nAddrs > 0 && entrySize === 2) {\n      addrs = new Array(nAddrs);\n      for (i = 0; i < nAddrs; ++i) {\n        addr = '';\n        for (j = 0; j < 4; ++j) {\n          addr += b[offset++];\n          if (j < 3) addr += '.';\n        }\n        addrs.push({\n          addr: addr,\n          pref: b.readInt32BE(offset, true)\n        });\n        offset += 4;\n      }\n    }\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      lifetime: lifetime,\n      addrs: addrs\n    };\n  } else if (type === 3 || type === 4 || type === 11) {\n    // Destination unreachable (other) / Source quench / Time exceeded\n\n    offset += 4; // skip unused part\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      IPHeader: {\n        info: IPhdr.info,\n        hdrlen: IPhdr.hdrlen\n      },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 13) {\n    // Timestamp\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined,\n      originate: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Originate Timestamp\n    ret.info.originate = b.readUInt32BE(offset, true);\n    offset += 4;\n  } else if (type === 14) {\n    // Timestamp reply\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined,\n      originate: undefined,\n      receive: undefined,\n      transmit: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Originate Timestamp\n    ret.info.originate = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Receive Timestamp\n    ret.info.receive = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Transmit Timestamp\n    ret.info.transmit = b.readUInt32BE(offset, true);\n    offset += 4;\n  } else if (type === 17 || type === 18) {\n    // Address mask request / reply\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined,\n      mask: ''\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Address Mask\n    for (i = 0; i < 4; ++i) {\n      ret.info.mask += b[offset++];\n      if (i < 3) ret.info.mask += '.';\n    }\n  } else if (type === 30) {\n    // Traceroute\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      outHopCount: undefined,\n      retHopCount: undefined,\n      outLnkSpeed: undefined,\n      outLnkMTU: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n    offset += 2; // skip unused part\n\n    // 16-bit Outbound Hop Count\n    ret.info.outHopCount = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Return Hop Count\n    ret.info.retHopCount = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Outbound Link Speed\n    ret.info.outLnkSpeed = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Outbound Link MTU\n    ret.info.outLnkMTU = b.readUInt32BE(offset, true);\n    offset += 4;\n  } /* else if (type === 38) {\n     // Domain name reply\n      ret.info = {\n       type: type,\n       code: code,\n       checksum: checksum,\n       identifier: undefined,\n       seqno: undefined,\n       ttl: undefined,\n       names: undefined\n     };\n      // 16-bit Identifier\n     ret.info.identifier = b.readUInt16BE(offset, true);\n     offset += 2;\n      // 16-bit Sequence Number\n     ret.info.seqno = b.readUInt16BE(offset, true);\n     offset += 2;\n      // 32-bit Time-To-Live\n     ret.info.ttl = b.readInt32BE(offset, true);\n     offset += 2;\n      if (offset < nbytes) {\n       var names = [], length, ptr;\n       while (true) {\n         // 8-bit Length\n         length = b[offset++];\n         if (length === 0)\n           break;\n         \n       }\n       ret.info.names = names;\n     }\n    }*/else {\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum\n    };\n    offset += 4; // skip \"rest of header\" part\n  }\n  ret.offset = offset;\n  return ret;\n};\n\n// Transport Layer Protocols ===================================================\n\nexports.TCP = function (b, offset) {\n  offset || (offset = 0);\n  var origoffset = offset;\n  var ret = {\n    info: {\n      srcport: undefined,\n      dstport: undefined,\n      seqno: undefined,\n      ackno: undefined,\n      flags: undefined,\n      window: undefined,\n      checksum: undefined,\n      urgentptr: undefined,\n      options: undefined\n    },\n    hdrlen: undefined,\n    offset: undefined\n  };\n\n  // 16-bit Source Port\n  ret.info.srcport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Destination Port\n  ret.info.dstport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 32-bit Sequence Number\n  ret.info.seqno = b.readUInt32BE(offset, true);\n  offset += 4;\n\n  // 32-bit Acknowledgement Number\n  ret.info.ackno = b.readUInt32BE(offset, true);\n  offset += 4;\n\n  // 4-bit Data Offset\n  var dataoffset = (b[offset] & 0xF0) >> 4;\n\n  // 3-bit Reserved (skip)\n\n  // 9-bit Flags\n  ret.info.flags = ((b[offset++] & 1) << 8) + b[offset++];\n  if ((ret.info.flags & 0x10) === 0)\n    // ACK\n    ret.info.ackno = undefined;\n\n  // 16-bit Window Size\n  ret.info.window = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Checksum\n  ret.info.checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Urgent Pointer\n  if ((ret.info.flags & 0x20) > 0)\n    // URG\n    ret.info.urgentptr = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // skip Options parsing for now ...\n\n  ret.hdrlen = dataoffset * 4;\n  ret.offset = origoffset + ret.hdrlen;\n  return ret;\n};\nexports.UDP = function (b, offset) {\n  offset || (offset = 0);\n  var ret = {\n    info: {\n      srcport: undefined,\n      dstport: undefined,\n      length: undefined,\n      checksum: undefined\n    },\n    offset: undefined\n  };\n\n  // 16-bit Source Port\n  ret.info.srcport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Destination Port\n  ret.info.dstport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Length (header + data)\n  ret.info.length = b.readUInt16BE(offset, true) - 8;\n  offset += 2;\n\n  // 16-bit Checksum\n  ret.info.checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n  ret.offset = offset;\n  return ret;\n};\nexports.SCTP = function (b, nbytes, offset) {\n  offset || (offset = 0);\n  var ret = {\n    info: {\n      srcport: undefined,\n      dstport: undefined,\n      verifyTag: undefined,\n      checksum: undefined,\n      chunks: undefined\n    },\n    offset: undefined\n  };\n\n  // 16-bit Source Port\n  ret.info.srcport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Destination Port\n  ret.info.dstport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Checksum\n  ret.info.checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n  if (offset < nbytes) {\n    var chunks = [],\n      type,\n      flags,\n      length;\n    while (offset < nbytes) {\n      // 8-bit Chunk Type\n      type = b[offset++];\n\n      // 8-bit Chunk Flags\n      flags = b[offset++];\n\n      // 16-bit Chunk Length\n      length = b.readUInt16BE(offset, true);\n      offset += 2;\n      chunks.push({\n        type: type,\n        flags: flags,\n        offset: offset,\n        length: length\n      });\n      offset += length;\n    }\n    ret.info.chunks = chunks;\n  }\n  ret.offset = offset;\n  return ret;\n};\nexports.ARP = function (b, offset) {\n  offset || (offset = 0);\n  var ret = {\n    info: {\n      hardwareaddr: undefined,\n      protocol: undefined,\n      hdrlen: undefined,\n      protlen: undefined,\n      opcode: undefined,\n      sendermac: '',\n      senderip: '',\n      targetmac: '',\n      targetip: ''\n    },\n    offset: undefined\n  };\n  ret.info.hardwareaddr = b.readUInt16BE(offset, true);\n  offset += 2;\n  ret.info.protocol = b.readUInt16BE(offset, true);\n  offset += 2;\n  ret.info.hdrlen = b.readInt8(offset, true);\n  offset += 1;\n  ret.info.protlen = b.readInt8(offset, true);\n  offset += 1;\n  ret.info.opcode = b.readUInt16BE(offset, true);\n  offset += 2;\n  if (ret.info.hdrlen == 6 && ret.info.protlen == 4) {\n    for (i = 0; i < 6; ++i) {\n      ret.info.sendermac += ('00' + b[offset++].toString(16)).substr(-2);\n      if (i < 5) ret.info.sendermac += ':';\n    }\n    for (i = 0; i < 4; ++i) {\n      ret.info.senderip += b[offset++];\n      if (i < 3) ret.info.senderip += '.';\n    }\n    for (i = 0; i < 6; ++i) {\n      ret.info.targetmac += ('00' + b[offset++].toString(16)).substr(-2);\n      if (i < 5) ret.info.targetmac += ':';\n    }\n    for (i = 0; i < 4; ++i) {\n      ret.info.targetip += b[offset++];\n      if (i < 3) ret.info.targetip += '.';\n    }\n  }\n  ret.offset = offset;\n  return ret;\n};\n\n// Exported Constants ==========================================================\n\nexports.PROTOCOL = {\n  ETHERNET: {\n    // Taken from (as of 2012-03-16):\n    //     http://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers.txt\n    'IPV4': 2048,\n    // Internet IP (IPv4)                                    [IANA]\n    'X.75': 2049,\n    // X.75 Internet                                [Neil_Sembower]\n    'CHAOSNET': 2052,\n    // Chaosnet                                 [Neil_Sembower]\n    'X.25': 2053,\n    // X.25 Level 3                                 [Neil_Sembower]\n    'ARP': 2054,\n    // ARP                                                    [IANA]\n    'ARP-RELAY': 2056,\n    // Frame Relay ARP                               [RFC1701]\n    'TRILL': 8947,\n    // TRILL                                             [RFC6325]\n    'L2-IS-IS': 8948,\n    // L2-IS-IS                                       [RFC6325]\n    'ARP-REVERSE': 32821,\n    // Reverse ARP                 [RFC903][Joseph_Murdock]\n    'APPLETALK': 32923,\n    // Appletalk                              [Neil_Sembower]\n    'APPLETALK-AARP': 33011,\n    // AppleTalk AARP (Kinetics)         [Neil_Sembower]\n    'VLAN': 33024,\n    // IEEE 802.1Q VLAN-tagged frames (initially Wellfleet)\n    'SNMP': 33100,\n    // SNMP                                     [Joyce_K_Reynolds]\n    'XTP': 33149,\n    // XTP                                          [Neil_Sembower]\n    'IPV6': 34525,\n    // IPv6                                                 [IANA]\n    'TCPIP-COMPRESS': 34667,\n    // TCP/IP Compression                      [RFC1144]\n    'PPP': 34827,\n    // PPP                                                   [IANA]\n    'GSMP': 34828,\n    // GSMP                                                 [IANA]\n    'PPPOE-DISCOVER': 34915,\n    // PPPoE Discovery Stage                   [RFC2516]\n    'PPPOE-SESSION': 34916,\n    // PPPoE Session Stage                      [RFC2516]\n    'LOOPBACK': 36864 // Loopback                                 [Neil_Sembower]\n  },\n  IP: {\n    // Taken from (as of 2012-10-17):\n    //     http://www.iana.org/assignments/protocol-numbers/protocol-numbers.txt\n    'HOPOPT': 0,\n    // IPv6 Hop-by-Hop Option                             [RFC2460]\n    'ICMP': 1,\n    // Internet Control Message                              [RFC792]\n    'IGMP': 2,\n    // Internet Group Management                            [RFC1112]\n    'GGP': 3,\n    // Gateway-to-Gateway                                     [RFC823]\n    'IPV4': 4,\n    // IPv4 encapsulation                                   [RFC2003]\n    'ST': 5,\n    // Stream                                        [RFC1190][RFC1819]\n    'TCP': 6,\n    // Transmission Control                                   [RFC793]\n    'CBT': 7,\n    // CBT                                            [Tony_Ballardie]\n    'EGP': 8,\n    // Exterior Gateway Protocol                 [RFC888][David_Mills]\n    'IGP': 9,\n    // any private interior gateway (used by\n    // [Internet_Assigned_Numbers_Authority] Cisco for their IGRP)\n    'BBN-RCC-MON': 10,\n    // BBN RCC Monitoring                     [Steve_Chipman]\n    'NVP-II': 11,\n    // Network Voice Protocol               [RFC741][Steve_Casner]\n    'PUP': 12,\n    // PUP            [Boggs, D., J. Shoch, E. Taft, and R. Metcalfe,\n    //                 \"PUP: An Internetwork Architecture\",\n    //                 XEROX Palo Alto Research Center, CSL-79-10,\n    //                 July 1979; also in IEEE Transactions on\n    //                 Communication, Volume COM-28, Number 4,\n    //                 April 1980.]\n    //                                                      [[XEROX]]\n    'ARGUS': 13,\n    // ARGUS                                   [Robert_W_Scheifler]\n    'EMCON': 14,\n    // EMCON                                    [<mystery contact>]\n    'XNET': 15,\n    // Cross Net Debugger       [Haverty, J.,\n    //                           \"XNET Formats for Internet Protocol\n    //                            Version 4\",\n    //                           IEN 158, October 1980.]\n    //                                                [Jack_Haverty]\n    'CHAOS': 16,\n    // Chaos                                       [J_Noel_Chiappa]\n    'UDP': 17,\n    // User Datagram                             [RFC768][Jon_Postel]\n    'MUX': 18,\n    // Multiplexing                         [Cohen, D. and J. Postel,\n    //                                       \"Multiplexing Protocol\",\n    //                                       IEN 90, USC/Information\n    //                                       Sciences Institute,\n    //                                       May 1979.]\n    //                                                   [Jon_Postel]\n    'DCN-MEAS': 19,\n    // DCN Measurement Subsystems                  [David_Mills]\n    'HMP': 20,\n    // Host Monitoring                        [RFC869][Robert_Hinden]\n    'PRM': 21,\n    // Packet Radio Measurement                         [Zaw_Sing_Su]\n    'XNS-IDP': 22,\n    // XEROX NS IDP       [\"The Ethernet, A Local Area Network: \n    //                      Data Link Layer and Physical Layer\n    //                      Specification\", AA-K759B-TK,\n    //                      Digital Equipment Corporation,\n    //                      Maynard, MA. Also as: \"The Ethernet \n    //                      - A Local Area Network\",\n    //                      Version 1.0,\n    //                      Digital Equipment Corporation,\n    //                      Intel Corporation, Xerox Corporation,\n    //                      September 1980. And: \"The Ethernet,\n    //                       A Local Area Network: Data Link\n    //                       Layer and Physical Layer\n    //                       Specifications\",\n    //                      Digital, Intel and Xerox,\n    //                      November 1982. And: XEROX,\n    //                      \"The Ethernet, A Local Area Network: \n    //                       Data Link Layer and Physical Layer\n    //                       Specification\",\n    //                      X3T51/80-50, Xerox Corporation,\n    //                      Stamford, CT., October 1980.]\n    //                                                  [[XEROX]]\n    'TRUNK-1': 23,\n    // Trunk-1                                      [Barry_Boehm]\n    'TRUNK-2': 24,\n    // Trunk-2                                      [Barry_Boehm]\n    'LEAF-1': 25,\n    // Leaf-1                                        [Barry_Boehm]\n    'LEAF-2': 26,\n    // Leaf-2                                        [Barry_Boehm]\n    'RDP': 27,\n    // Reliable Data Protocol                 [RFC908][Robert_Hinden]\n    'IRTP': 28,\n    // Internet Reliable Transaction          [RFC938][Trudy_Miller]\n    'ISO-TP4': 29,\n    // ISO Transport Protocol Class 4 [RFC905][<mystery contact>]\n    'NETBLT': 30,\n    // Bulk Data Transfer Protocol           [RFC969][David_Clark]\n    'MFE-NSP': 31,\n    // MFE Network Services Protocol   [Shuttleworth, B.,\n    //                                  \"A Documentary of MFENet,\n    //                                   a National Computer\n    //                                   Network\", UCRL-52317,\n    //                                   Lawrence Livermore Labs,\n    //                                   Livermore, California,\n    //                                   June 1977.]\n    //                                             [Barry_Howard]\n    'MERIT-INP': 32,\n    // MERIT Internodal Protocol            [Hans_Werner_Braun]\n    'DCCP': 33,\n    // Datagram Congestion Control Protocol                [RFC4340]\n    '3PC': 34,\n    // Third Party Connect Protocol              [Stuart_A_Friedberg]\n    'IDPR': 35,\n    // Inter-Domain Policy Routing Protocol      [Martha_Steenstrup]\n    'XTP': 36,\n    // XTP                                             [Greg_Chesson]\n    'DDP': 37,\n    // Datagram Delivery Protocol                      [Wesley_Craig]\n    'IDPR-CMTP': 38,\n    // IDPR Control Message Transport Proto [Martha_Steenstrup]\n    'TP++': 39,\n    // TP++ Transport Protocol                       [Dirk_Fromhein]\n    'IL': 40,\n    // IL Transport Protocol                           [Dave_Presotto]\n    'IPV6': 41,\n    // IPv6 encapsulation                                  [RFC2473]\n    'SDRP': 42,\n    // Source Demand Routing Protocol               [Deborah_Estrin]\n    'IPV6-ROUTE': 43,\n    // Routing Header for IPv6                 [Steve_Deering]\n    'IPV6-FRAG': 44,\n    // Fragment Header for IPv6                 [Steve_Deering]\n    'IDRP': 45,\n    // Inter-Domain Routing Protocol                     [Sue_Hares]\n    'RSVP': 46,\n    // Reservation Protocol           [RFC2205][RFC3209][Bob_Braden]\n    'GRE': 47,\n    // Generic Routing Encapsulation               [RFC1701][Tony_Li]\n    'DSR': 48,\n    // Dynamic Source Routing Protocol                      [RFC4728]\n    'BNA': 49,\n    // BNA                                             [Gary Salamon]\n    'ESP': 50,\n    // Encap Security Payload                               [RFC4303]\n    'AH': 51,\n    // Authentication Header                                 [RFC4302]\n    'I-NLSP': 52,\n    // Integrated Net Layer Security TUBA         [K_Robert_Glenn]\n    'SWIPE': 53,\n    // IP with Encryption                          [John_Ioannidis]\n    'NARP': 54,\n    // NBMA Address Resolution Protocol                    [RFC1735]\n    'MOBILE': 55,\n    // IP Mobility                               [Charlie_Perkins]\n    'TLSP': 56,\n    // Transport Layer Security Protocol using Kryptonet key\n    // management\n    //                                              [Christer_Oberg]\n    'SKIP': 57,\n    // SKIP                                            [Tom_Markson]\n    'ICMPV6': 58,\n    // ICMP for IPv6                                     [RFC2460]\n    'IPV6-NONXT': 59,\n    // No Next Header for IPv6                       [RFC2460]\n    'IPV6-OPTS': 60,\n    // Destination Options for IPv6                   [RFC2460]\n    // 61 any host internal protocol       [Internet_Assigned_Numbers_Authority]\n    'CFTP': 62,\n    // CFTP                                [Forsdick, H., \"CFTP\",\n    //                                      Network Message,\n    //                                      Bolt Beranek and Newman,\n    //                                      January 1982.]\n    //                                              [Harry_Forsdick]\n    // 63 any local network                [Internet_Assigned_Numbers_Authority]\n    'SAT-EXPAK': 64,\n    // SATNET and Backroom EXPAK            [Steven_Blumenthal]\n    'KRYPTOLAN': 65,\n    // Kryptolan                                     [Paul Liu]\n    'RVD': 66,\n    // MIT Remote Virtual Disk Protocol           [Michael_Greenwald]\n    'IPPC': 67,\n    // Internet Pluribus Packet Core             [Steven_Blumenthal]\n    // 68 any distributed file system      [Internet_Assigned_Numbers_Authority]\n    'SAT-MON': 69,\n    // SATNET Monitoring                      [Steven_Blumenthal]\n    'VISA': 70,\n    // VISA Protocol                                   [Gene_Tsudik]\n    'IPCV': 71,\n    // Internet Packet Core Utility              [Steven_Blumenthal]\n    'CPNX': 72,\n    // Computer Protocol Network Executive         [David Mittnacht]\n    'CPHB': 73,\n    // Computer Protocol Heart Beat                [David Mittnacht]\n    'WSN': 74,\n    // Wang Span Network                            [Victor Dafoulas]\n    'PVP': 75,\n    // Packet Video Protocol                           [Steve_Casner]\n    'BR-SAT-MON': 76,\n    // Backroom SATNET Monitoring          [Steven_Blumenthal]\n    'SUN-ND': 77,\n    // SUN ND PROTOCOL-Temporary                  [William_Melohn]\n    'WB-MON': 78,\n    // WIDEBAND Monitoring                     [Steven_Blumenthal]\n    'WB-EXPAK': 79,\n    // WIDEBAND EXPAK                        [Steven_Blumenthal]\n    'ISO-IP': 80,\n    // ISO Internet Protocol                     [Marshall_T_Rose]\n    'VMTP': 81,\n    // VMTP                                          [Dave_Cheriton]\n    'SECURE-VMTP': 82,\n    // SECURE-VMTP                            [Dave_Cheriton]\n    'VINES': 83,\n    // VINES                                           [Brian Horn]\n    'TTP': 84,\n    // TTP                                              [Jim_Stevens]\n    'IPTM': 84,\n    // Protocol Internet Protocol Traffic Manager      [Jim_Stevens]\n    'NSFNET-IGP': 85,\n    // NSFNET-IGP                          [Hans_Werner_Braun]\n    'DGP': 86,\n    // Dissimilar Gateway Protocol   [M/A-COM Government Systems,\n    //                                \"Dissimilar Gateway Protocol\n    //                                 Specification, Draft Version\",\n    //                                Contract no. CS901145,\n    //                                November 16, 1987.]\n    //                                                  [Mike_Little]\n    'TCF': 87,\n    // TCF                                       [Guillermo_A_Loyola]\n    'EIGRP': 88,\n    // EIGRP                    [Cisco Systems,\n    //                           \"Gateway Server Reference Manual\",\n    //                           Manual Revision B, January 10,\n    //                           1988.]\n    //                          [Guenther_Schreiner]\n    'OSPFIGP': 89,\n    // OSPFIGP              [RFC1583][RFC2328][RFC5340][John_Moy]\n    'SPRITE-RPC': 90,\n    // Sprite RPC Protocol   [Welch, B., \"The Sprite Remote\n    //                        Procedure Call System\",\n    //                        Technical Report,\n    //                        UCB/Computer Science Dept.,\n    //                        86/302, University of California\n    //                        at Berkeley, June 1986.]\n    //                       [Bruce Willins]\n    'LARP': 91,\n    // Locus Address Resolution Protocol                [Brian Horn]\n    'MTP': 92,\n    // Multicast Transport Protocol                 [Susie_Armstrong]\n    'AX.25': 93,\n    // AX.25 Frames                                  [Brian_Kantor]\n    'IPIP': 94,\n    // IP-within-IP Encapsulation Protocol          [John_Ioannidis]\n    'MICP': 95,\n    // Mobile Internetworking Control Pro.          [John_Ioannidis]\n    'SCC-SP': 96,\n    // Semaphore Communications Sec. Pro.            [Howard_Hart]\n    'ETHERIP': 97,\n    // Ethernet-within-IP Encapsulation                 [RFC3378]\n    'ENCAP': 98,\n    // Encapsulation Header              [RFC1241][Robert_Woodburn]\n    // 99 any private encryption scheme    [Internet_Assigned_Numbers_Authority]\n    'GMTP': 100,\n    // GMTP                                                [[RXB5]]\n    'IFMP': 101,\n    // Ipsilon Flow Management Protocol                [Bob_Hinden]\n    //                                       [November 1995, 1997.]\n    'PNNI': 102,\n    // PNNI over IP                                   [Ross_Callon]\n    'PIM': 103,\n    // Protocol Independent Multicast      [RFC4601][Dino_Farinacci]\n    'ARIS': 104,\n    // ARIS                                         [Nancy_Feldman]\n    'SCPS': 105,\n    // SCPS                                          [Robert_Durst]\n    'QNX': 106,\n    // QNX                                          [Michael_Hunter]\n    'A/N': 107,\n    // Active Networks                                  [Bob_Braden]\n    'IPCOMP': 108,\n    // IP Payload Compression Protocol                  [RFC2393]\n    'SNP': 109,\n    // Sitara Networks Protocol                 [Manickam_R_Sridhar]\n    'COMPAQ-PEER': 110,\n    // Compaq Peer Protocol                   [Victor_Volpe]\n    'IPX-IN-IP': 111,\n    // IPX in IP                                      [CJ_Lee]\n    'VRRP': 112,\n    // Virtual Router Redundancy Protocol                 [RFC5798]\n    'PGM': 113,\n    // PGM Reliable Transport Protocol               [Tony_Speakman]\n    // 114 any 0-hop protocol              [Internet_Assigned_Numbers_Authority]\n    'L2TP': 115,\n    // Layer Two Tunneling Protocol        [RFC3931][Bernard_Aboba]\n    'DDX': 116,\n    // D-II Data Exchange (DDX)                        [John_Worley]\n    'IATP': 117,\n    // Interactive Agent Transfer Protocol            [John_Murphy]\n    'STP': 118,\n    // Schedule Transfer Protocol               [Jean_Michel_Pittet]\n    'SRP': 119,\n    // SpectraLink Radio Protocol                    [Mark_Hamilton]\n    'UTI': 120,\n    // UTI                                          [Peter_Lothberg]\n    'SMP': 121,\n    // Simple Message Protocol                         [Leif_Ekblad]\n    'SM': 122,\n    // SM                                             [Jon_Crowcroft]\n    'PTP': 123,\n    // Performance Transparency Protocol             [Michael_Welzl]\n    'ISIS': 124,\n    // over IPv4                                  [Tony_Przygienda]\n    'FIRE': 125,\n    //                                            [Criag_Partridge]\n    'CRTP': 126,\n    // Combat Radio Transport Protocol             [Robert_Sautter]\n    'CRUDP': 127,\n    // Combat Radio User Datagram                 [Robert_Sautter]\n    'SSCOPMCE': 128,\n    //                                             [Kurt_Waber]\n    'IPLT': 129,\n    //                                                 [[Hollbach]]\n    'SPS': 130,\n    // Secure Packet Shield                          [Bill_McIntosh]\n    'PIPE': 131,\n    // Private IP Encapsulation within IP          [Bernhard_Petri]\n    'SCTP': 132,\n    // Stream Control Transmission Protocol     [Randall_R_Stewart]\n    'FC': 133,\n    // Fibre Channel                      [Murali_Rajagopal][RFC6172]\n    'RSVP-E2E-IGNORE': 134,\n    //                                         [RFC3175]\n    'MOBILITY HEADER': 135,\n    //                                         [RFC6275]\n    'UDPLITE': 136,\n    //                                                 [RFC3828]\n    'MPLS-IN-IP': 137,\n    //                                              [RFC4023]\n    'MANET': 138,\n    // MANET Protocols                                   [RFC5498]\n    'HIP': 139,\n    // Host Identity Protocol                              [RFC5201]\n    'SHIM6': 140,\n    // Shim6 Protocol                                    [RFC5533]\n    'WESP': 141,\n    // Wrapped Encapsulating Security Payload             [RFC5840]\n    'ROHC': 142 // Robust Header Compression                           [RFC5858]\n  }\n};\nfor (var category in exports.PROTOCOL) for (var protocol in exports.PROTOCOL[category]) exports.PROTOCOL[category][exports.PROTOCOL[category][protocol]] = protocol;","map":{"version":3,"names":["exports","Ethernet","b","offset","i","ret","info","dstmac","srcmac","type","undefined","vlan","length","toString","priority","CFI","VID","typelen","readUInt16BE","IPV4","origoffset","hdrlen","dscp","ecn","totallen","id","flags","fragoffset","ttl","protocol","hdrchecksum","srcaddr","dstaddr","options","IPV6_EXTENSIONS","IPV6","class","flowLabel","extensions","hopLimit","payloadlen","nextHeader","curHeader","hdrExtLen","ICMPV4","nbytes","code","checksum","j","IPhdr","addr","identifier","seqno","mtu","nextHopMTU","IPHeader","dataOffset","gatewayAddr","ptr","readUInt32BE","pointer","nAddrs","entrySize","lifetime","addrs","Array","push","pref","readInt32BE","originate","receive","transmit","mask","outHopCount","retHopCount","outLnkSpeed","outLnkMTU","TCP","srcport","dstport","ackno","window","urgentptr","dataoffset","UDP","SCTP","verifyTag","chunks","ARP","hardwareaddr","protlen","opcode","sendermac","senderip","targetmac","targetip","readInt8","substr","PROTOCOL","ETHERNET","IP","category"],"sources":["D:/Anonymous chat app/anonymous-chat/node_modules/cap/lib/Decoders.js"],"sourcesContent":["// Link Layer Protocols ========================================================\n\nexports.Ethernet = function(b, offset) {\n  offset || (offset = 0);\n  var i;\n  var ret = {\n    info: {\n      dstmac: '',\n      srcmac: '',\n      type: undefined,\n      vlan: undefined,\n      length: undefined\n    },\n    offset: undefined\n  };\n\n  // 32-bit Destination MAC Address\n  for (i = 0; i < 6; ++i) {\n    if (b[offset] < 16)\n      ret.info.dstmac += '0';\n    ret.info.dstmac += b[offset++].toString(16);\n    if (i < 5)\n      ret.info.dstmac += ':';\n  }\n\n  // 32-bit Source MAC Address\n  for (i = 0; i < 6; ++i) {\n    if (b[offset] < 16)\n      ret.info.srcmac += '0';\n    ret.info.srcmac += b[offset++].toString(16);\n    if (i < 5)\n      ret.info.srcmac += ':';\n  }\n  if (b[offset] === 0x81 && b[offset + 1] === 0x00) {\n    // VLAN tag\n    offset += 2;\n    ret.info.vlan = {\n      priority: b[offset] >> 0x1F,\n      CFI: (b[offset] & 0x10) > 0,\n      VID: ((b[offset] & 0x0F) << 8) + b[offset + 1]\n    };\n    offset += 2;\n  }\n\n  // 16-bit Type/Length\n  var typelen = b.readUInt16BE(offset, true);\n  if (typelen <= 1500)\n    ret.info.length = typelen;\n  else if (typelen >= 1536)\n    ret.info.type = typelen;\n\n  ret.offset = offset + 2;\n  return ret;\n};\n\n// Internet Layer Protocols ====================================================\n\nexports.IPV4 = function(b, offset) {\n  offset || (offset = 0);\n  var origoffset = offset, i;\n  var ret = {\n    info: {\n      hdrlen: undefined,\n      dscp: undefined,\n      ecn: undefined,\n      totallen: undefined,\n      id: undefined,\n      flags: undefined,\n      fragoffset: undefined,\n      ttl: undefined,\n      protocol: undefined,\n      hdrchecksum: undefined,\n      srcaddr: '',\n      dstaddr: '',\n      options: undefined\n    },\n    hdrlen: undefined,\n    offset: undefined\n  };\n\n  // 4-bit Version -- always value of 4 (skip)\n\n  // 4-bit Internet Header Length\n  ret.info.hdrlen = (b[offset++] & 0x0F);\n\n  // 6-bit Differentiated Services Code Point\n  ret.info.dscp = ((b[offset] & 0xFC) >> 2);\n\n  // 2-bit Explicit Congestion Notification\n  ret.info.ecn = (b[offset++] & 0x03);\n\n  // 16-bit Total Length\n  ret.info.totallen = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Identification\n  ret.info.id = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 3-bit Flags\n  ret.info.flags = ((b[offset] & 0xE0) >> 5);\n\n  // 13-bit Fragment Offset\n  ret.info.fragoffset = ((b[offset++] & 0x1F) << 8) + b[offset++];\n\n  // 8-bit Time to Live\n  ret.info.ttl = b[offset++];\n\n  // 8-bit Protocol\n  ret.info.protocol = b[offset++];\n\n  // 16-bit Header Checksum\n  ret.info.hdrchecksum = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 32-bit Source Address\n  for (i = 0; i < 4; ++i) {\n    ret.info.srcaddr += b[offset++];\n    if (i < 3)\n      ret.info.srcaddr += '.';\n  }\n\n  // 32-bit Destination Address\n  for (i = 0; i < 4; ++i) {\n    ret.info.dstaddr += b[offset++];\n    if (i < 3)\n      ret.info.dstaddr += '.';\n  }\n\n  if (ret.info.hdrlen > 5) {\n    // TODO: options\n  }\n\n  ret.hdrlen = (ret.info.hdrlen * 4);\n  ret.offset = origoffset + ret.hdrlen;\n\n  // Check for zero total length due to TSO\n  if (ret.info.totallen === 0)\n    ret.info.totallen = (b.length - ret.offset) + ret.hdrlen;\n\n  return ret;\n};\n\nvar IPV6_EXTENSIONS = {\n  0: 'Hop-by-Hop Options',\n  43: 'Routing',\n  44: 'Fragment',\n  50: 'Encapsulating Security Payload',\n  51: 'Authentication Header',\n  //59: 'No Next Header',\n  60: 'Destination Options',\n  135: 'Mobility'\n};\n\nexports.IPV6 = function(b, offset) {\n  offset || (offset = 0);\n  var i;\n  var ret = {\n    info: {\n      class: undefined,\n      flowLabel: undefined,\n      extensions: undefined,\n      protocol: undefined,\n      hopLimit: undefined,\n      srcaddr: '',\n      dstaddr: ''\n    },\n    payloadlen: undefined,\n    offset: undefined\n  };\n\n  // 4-bit Version -- always value of 6 (skip)\n\n  // 8-bit Traffic Class\n  ret.info.class = ((b[offset] & 0x0F) << 4) + ((b[++offset] & 0xF0) >> 4);\n\n  // 20-bit Flow Label\n  ret.info.flowLabel = ((b[offset] & 0x0F) << 16) + b.readUInt16BE(++offset, true);\n  offset += 2;\n\n  // 16-bit Payload Length\n  ret.info.payloadlen = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 8-bit Next Header\n  var nextHeader = b[offset++], curHeader = nextHeader, hdrExtLen;\n\n  // 8-bit Hop Limit\n  ret.info.hopLimit = b[offset++];\n\n  // 128-bit Source Address\n  for (i = 0; i < 16; ++i) {\n    if (b[offset] < 16)\n      ret.info.srcaddr += '0';\n    ret.info.srcaddr += b[offset++].toString(16);\n    if (i < 15)\n      ret.info.srcaddr += ':';\n  }\n\n  // 128-bit Destination Address\n  for (i = 0; i < 16; ++i) {\n    if (b[offset] < 16)\n      ret.info.dstaddr += '0';\n    ret.info.dstaddr += b[offset++].toString(16);\n    if (i < 15)\n      ret.info.dstaddr += ':';\n  }\n\n  while (IPV6_EXTENSIONS[curHeader] !== undefined) {\n    // TODO: parse extensions\n    if (curHeader === 0 || curHeader === 43 || curHeader === 60\n        || curHeader === 135) {\n      // Header Extension Length field is in 8-byte units\n      nextHeader = b[offset];\n      hdrExtLen = b[offset + 1];\n      offset += 8;\n      offset += (8 * hdrExtLen);\n    } else if (curHeader === 44) {\n      nextHeader = b[offset];\n      offset += 8;\n    } else if (curHeader === 51) {\n      // Payload Length field is in 4-byte units\n      // I believe this length already excludes the Next Header and Payload\n      // Length fields\n      nextHeader = b[offset++];\n      offset += (4 * b[offset]);\n    }\n    curHeader = nextHeader;\n  }\n  \n  if (curHeader !== 59) {\n    ret.info.protocol = curHeader;\n    ret.offset = offset;\n  }\n\n  return ret;\n};\n\nexports.ICMPV4 = function(b, nbytes, offset) {\n  offset || (offset = 0);\n  var type, code, checksum, i, j;\n\n  var ret = {\n    info: undefined,\n    offset: undefined\n  };\n\n  // 8-bit Type\n  type = b[offset++];\n\n  // 8-bit Code\n  code = b[offset++];\n\n  // 16-bit Header Checksum\n  checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  var IPhdr, addr;\n  if (type === 0 || type === 15 || type === 16 || type === 37) {\n    // Echo reply / Information request / Information reply\n    // / Domain name request\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // For Echo reply, (Optional) data from `offset` to end ...\n  } else if (type === 3 && code === 4) {\n    // Destination unreachable with Next-hop MTU\n\n    offset += 2; // skip unused part\n\n    // 16-bit Next-hop MTU\n    var mtu = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      nextHopMTU: mtu,\n      IPHeader: { info: IPhdr.info, hdrlen: IPhdr.hdrlen },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 3 || type === 4 || type === 11) {\n    // Destination unreachable (other) / Source quench / Time exceeded\n\n    offset += 4; // skip unused part\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      IPHeader: { info: IPhdr.info, hdrlen: IPhdr.hdrlen },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 5) {\n    // Redirect\n\n    // 32-bit Redirected Gateway IP Address\n    addr = '';\n    for (i = 0; i < 4; ++i) {\n      addr += b[offset++];\n      if (i < 3)\n        addr += '.';\n    }\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      gatewayAddr: addr,\n      IPHeader: { info: IPhdr.info, hdrlen: IPhdr.hdrlen },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 12 || type === 31 || type === 40) {\n    // Parameter problem / Conversion error / Security failure\n\n    var ptr;\n    if (type === 12) {\n      // 8-bit Pointer\n      ptr = b[offset++];\n\n      offset += 3; // skip unused part\n    } else  if (type === 31) {\n      // 32-bit Pointer\n      ptr = b.readUInt32BE(offset, true);\n      offset += 4;\n    } else {\n      offset += 2; // skip unused part\n      ptr = b.readUInt16BE(offset, true);\n      offset += 2;\n    }\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      pointer: ptr,\n      IPHeader: { info: IPhdr.info, hdrlen: IPhdr.hdrlen },\n      dataOffset: offset\n    };\n\n    if (type === 12 || type === 40) {\n      // First 8 bytes of original datagram's data\n      offset += 8;\n    } else {\n      // First 256 bytes of original datagram's data\n      offset += 256;\n    }\n  } else if (type === 9) {\n    // Router advertisement\n\n    // 8-bit Number of Addresses\n    var nAddrs = b[offset++];\n\n    // 8-bit Address Entry Size (2 for ICMPv4)\n    var entrySize = b[offset++];\n\n    // 16-bit Lifetime\n    var lifetime = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    var addrs;\n    if (nAddrs > 0 && entrySize === 2) {\n      addrs = new Array(nAddrs);\n      for (i = 0; i < nAddrs; ++i) {\n        addr = '';\n        for (j = 0; j < 4; ++j) {\n          addr += b[offset++];\n          if (j < 3)\n            addr += '.';\n        }\n        addrs.push({ addr: addr, pref: b.readInt32BE(offset, true) });\n        offset += 4;\n      }\n    }\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      lifetime: lifetime,\n      addrs: addrs\n    };\n  } else if (type === 3 || type === 4 || type === 11) {\n    // Destination unreachable (other) / Source quench / Time exceeded\n\n    offset += 4; // skip unused part\n\n    // IPv4 Header\n    IPhdr = exports.IPV4(b, offset);\n    offset = IPhdr.offset;\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      IPHeader: { info: IPhdr.info, hdrlen: IPhdr.hdrlen },\n      dataOffset: offset\n    };\n\n    // First 8 bytes of original datagram's data\n    offset += 8;\n  } else if (type === 13) {\n    // Timestamp\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined,\n      originate: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Originate Timestamp\n    ret.info.originate = b.readUInt32BE(offset, true);\n    offset += 4;\n  } else if (type === 14) {\n    // Timestamp reply\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined,\n      originate: undefined,\n      receive: undefined,\n      transmit: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Originate Timestamp\n    ret.info.originate = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Receive Timestamp\n    ret.info.receive = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Transmit Timestamp\n    ret.info.transmit = b.readUInt32BE(offset, true);\n    offset += 4;\n  } else if (type === 17 || type === 18) {\n    // Address mask request / reply\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined,\n      mask: ''\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Address Mask\n    for (i = 0; i < 4; ++i) {\n      ret.info.mask += b[offset++];\n      if (i < 3)\n        ret.info.mask += '.';\n    }\n  } else if (type === 30) {\n    // Traceroute\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      outHopCount: undefined,\n      retHopCount: undefined,\n      outLnkSpeed: undefined,\n      outLnkMTU: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    offset += 2; // skip unused part\n\n    // 16-bit Outbound Hop Count\n    ret.info.outHopCount = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Return Hop Count\n    ret.info.retHopCount = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Outbound Link Speed\n    ret.info.outLnkSpeed = b.readUInt32BE(offset, true);\n    offset += 4;\n\n    // 32-bit Outbound Link MTU\n    ret.info.outLnkMTU = b.readUInt32BE(offset, true);\n    offset += 4;\n  }/* else if (type === 38) {\n    // Domain name reply\n\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum,\n      identifier: undefined,\n      seqno: undefined,\n      ttl: undefined,\n      names: undefined\n    };\n\n    // 16-bit Identifier\n    ret.info.identifier = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 16-bit Sequence Number\n    ret.info.seqno = b.readUInt16BE(offset, true);\n    offset += 2;\n\n    // 32-bit Time-To-Live\n    ret.info.ttl = b.readInt32BE(offset, true);\n    offset += 2;\n\n    if (offset < nbytes) {\n      var names = [], length, ptr;\n      while (true) {\n        // 8-bit Length\n        length = b[offset++];\n        if (length === 0)\n          break;\n        \n      }\n      ret.info.names = names;\n    }\n  }*/ else {\n    ret.info = {\n      type: type,\n      code: code,\n      checksum: checksum\n    };\n    offset += 4; // skip \"rest of header\" part\n  }\n\n  ret.offset = offset;\n  return ret;\n};\n\n// Transport Layer Protocols ===================================================\n\nexports.TCP = function(b, offset) {\n  offset || (offset = 0);\n  var origoffset = offset;\n  var ret = {\n    info: {\n      srcport: undefined,\n      dstport: undefined,\n      seqno: undefined,\n      ackno: undefined,\n      flags: undefined,\n      window: undefined,\n      checksum: undefined,\n      urgentptr: undefined,\n      options: undefined\n    },\n    hdrlen: undefined,\n    offset: undefined\n  };\n\n  // 16-bit Source Port\n  ret.info.srcport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Destination Port\n  ret.info.dstport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 32-bit Sequence Number\n  ret.info.seqno = b.readUInt32BE(offset, true);\n  offset += 4;\n\n  // 32-bit Acknowledgement Number\n  ret.info.ackno = b.readUInt32BE(offset, true);\n  offset += 4;\n\n  // 4-bit Data Offset\n  var dataoffset = ((b[offset] & 0xF0) >> 4);\n\n  // 3-bit Reserved (skip)\n\n  // 9-bit Flags\n  ret.info.flags = ((b[offset++] & 1) << 8) + b[offset++];\n\n  if ((ret.info.flags & 0x10) === 0) // ACK\n    ret.info.ackno = undefined;\n\n  // 16-bit Window Size\n  ret.info.window = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Checksum\n  ret.info.checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Urgent Pointer\n  if ((ret.info.flags & 0x20) > 0) // URG\n    ret.info.urgentptr = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // skip Options parsing for now ...\n\n  ret.hdrlen = (dataoffset * 4);\n  ret.offset = origoffset + ret.hdrlen;\n  return ret;\n};\n\nexports.UDP = function(b, offset) {\n  offset || (offset = 0);\n  var ret = {\n    info: {\n      srcport: undefined,\n      dstport: undefined,\n      length: undefined,\n      checksum: undefined\n    },\n    offset: undefined\n  };\n\n  // 16-bit Source Port\n  ret.info.srcport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Destination Port\n  ret.info.dstport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Length (header + data)\n  ret.info.length = b.readUInt16BE(offset, true) - 8;\n  offset += 2;\n\n  // 16-bit Checksum\n  ret.info.checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  ret.offset = offset;\n  return ret;\n};\n\nexports.SCTP = function(b, nbytes, offset) {\n  offset || (offset = 0);\n  var ret = {\n    info: {\n      srcport: undefined,\n      dstport: undefined,\n      verifyTag: undefined,\n      checksum: undefined,\n      chunks: undefined\n    },\n    offset: undefined\n  };\n\n  // 16-bit Source Port\n  ret.info.srcport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Destination Port\n  ret.info.dstport = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  // 16-bit Checksum\n  ret.info.checksum = b.readUInt16BE(offset, true);\n  offset += 2;\n\n  if (offset < nbytes) {\n    var chunks = [], type, flags, length;\n    while (offset < nbytes) {\n      // 8-bit Chunk Type\n      type = b[offset++];\n\n      // 8-bit Chunk Flags\n      flags = b[offset++];\n\n      // 16-bit Chunk Length\n      length = b.readUInt16BE(offset, true);\n      offset += 2;\n\n      chunks.push({\n        type: type,\n        flags: flags,\n        offset: offset,\n        length: length\n      });\n\n      offset += length;\n    }\n    ret.info.chunks = chunks;\n  }\n\n  ret.offset = offset;\n  return ret;\n};\n\nexports.ARP = function(b, offset) {\n  offset || (offset = 0);\n  var ret = {\n    info: {\n      hardwareaddr: undefined,\n      protocol: undefined,\n      hdrlen: undefined,\n      protlen: undefined,\n      opcode: undefined,\n      sendermac: '',\n      senderip: '',\n      targetmac: '',\n      targetip: ''\n    },\n    offset: undefined\n  };\n  ret.info.hardwareaddr = b.readUInt16BE(offset, true);\n  offset += 2;\n  ret.info.protocol = b.readUInt16BE(offset, true);\n  offset += 2;\n  ret.info.hdrlen = b.readInt8(offset, true);\n  offset += 1;\n  ret.info.protlen = b.readInt8(offset, true);\n  offset += 1;\n  ret.info.opcode = b.readUInt16BE(offset, true);\n  offset += 2;\n  if (ret.info.hdrlen == 6 && ret.info.protlen == 4) {\n    for (i = 0; i < 6; ++i) {\n      ret.info.sendermac += ('00' + b[offset++].toString(16)).substr(-2);\n      if (i < 5)\n        ret.info.sendermac += ':';\n    }\n\n    for (i = 0; i < 4; ++i) {\n      ret.info.senderip += b[offset++];\n      if (i < 3)\n        ret.info.senderip += '.';\n    }\n\n    for (i = 0; i < 6; ++i) {\n      ret.info.targetmac += ('00' + b[offset++].toString(16)).substr(-2);\n      if (i < 5)\n        ret.info.targetmac += ':';\n    }\n\n    for (i = 0; i < 4; ++i) {\n      ret.info.targetip += b[offset++];\n      if (i < 3)\n        ret.info.targetip += '.';\n    }\n  }\n  ret.offset = offset;\n  return ret;\n};\n\n// Exported Constants ==========================================================\n\nexports.PROTOCOL = {\n  ETHERNET: {\n    // Taken from (as of 2012-03-16):\n    //     http://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers.txt\n   'IPV4': 2048, // Internet IP (IPv4)                                    [IANA]\n   'X.75': 2049, // X.75 Internet                                [Neil_Sembower]\n   'CHAOSNET': 2052, // Chaosnet                                 [Neil_Sembower]\n   'X.25': 2053, // X.25 Level 3                                 [Neil_Sembower]\n   'ARP': 2054, // ARP                                                    [IANA]\n   'ARP-RELAY': 2056, // Frame Relay ARP                               [RFC1701]\n   'TRILL': 8947, // TRILL                                             [RFC6325]\n   'L2-IS-IS': 8948, // L2-IS-IS                                       [RFC6325]\n   'ARP-REVERSE': 32821, // Reverse ARP                 [RFC903][Joseph_Murdock]\n   'APPLETALK': 32923, // Appletalk                              [Neil_Sembower]\n   'APPLETALK-AARP': 33011, // AppleTalk AARP (Kinetics)         [Neil_Sembower]\n   'VLAN': 33024, // IEEE 802.1Q VLAN-tagged frames (initially Wellfleet)\n   'SNMP': 33100, // SNMP                                     [Joyce_K_Reynolds]\n   'XTP': 33149, // XTP                                          [Neil_Sembower]\n   'IPV6': 34525, // IPv6                                                 [IANA]\n   'TCPIP-COMPRESS': 34667, // TCP/IP Compression                      [RFC1144]\n   'PPP': 34827, // PPP                                                   [IANA]\n   'GSMP': 34828, // GSMP                                                 [IANA]\n   'PPPOE-DISCOVER': 34915, // PPPoE Discovery Stage                   [RFC2516]\n   'PPPOE-SESSION': 34916, // PPPoE Session Stage                      [RFC2516]\n   'LOOPBACK': 36864 // Loopback                                 [Neil_Sembower]\n  },\n  IP: {\n    // Taken from (as of 2012-10-17):\n    //     http://www.iana.org/assignments/protocol-numbers/protocol-numbers.txt\n    'HOPOPT': 0, // IPv6 Hop-by-Hop Option                             [RFC2460]\n    'ICMP': 1, // Internet Control Message                              [RFC792]\n    'IGMP': 2, // Internet Group Management                            [RFC1112]\n    'GGP': 3, // Gateway-to-Gateway                                     [RFC823]\n    'IPV4': 4, // IPv4 encapsulation                                   [RFC2003]\n    'ST': 5, // Stream                                        [RFC1190][RFC1819]\n    'TCP': 6, // Transmission Control                                   [RFC793]\n    'CBT': 7, // CBT                                            [Tony_Ballardie]\n    'EGP': 8, // Exterior Gateway Protocol                 [RFC888][David_Mills]\n    'IGP': 9, // any private interior gateway (used by\n              // [Internet_Assigned_Numbers_Authority] Cisco for their IGRP)\n    'BBN-RCC-MON': 10, // BBN RCC Monitoring                     [Steve_Chipman]\n    'NVP-II': 11, // Network Voice Protocol               [RFC741][Steve_Casner]\n    'PUP': 12, // PUP            [Boggs, D., J. Shoch, E. Taft, and R. Metcalfe,\n               //                 \"PUP: An Internetwork Architecture\",\n               //                 XEROX Palo Alto Research Center, CSL-79-10,\n               //                 July 1979; also in IEEE Transactions on\n               //                 Communication, Volume COM-28, Number 4,\n               //                 April 1980.]\n               //                                                      [[XEROX]]\n    'ARGUS': 13, // ARGUS                                   [Robert_W_Scheifler]\n    'EMCON': 14, // EMCON                                    [<mystery contact>]\n    'XNET': 15, // Cross Net Debugger       [Haverty, J.,\n                //                           \"XNET Formats for Internet Protocol\n                //                            Version 4\",\n                //                           IEN 158, October 1980.]\n                //                                                [Jack_Haverty]\n    'CHAOS': 16, // Chaos                                       [J_Noel_Chiappa]\n    'UDP': 17, // User Datagram                             [RFC768][Jon_Postel]\n    'MUX': 18, // Multiplexing                         [Cohen, D. and J. Postel,\n               //                                       \"Multiplexing Protocol\",\n               //                                       IEN 90, USC/Information\n               //                                       Sciences Institute,\n               //                                       May 1979.]\n               //                                                   [Jon_Postel]\n    'DCN-MEAS': 19, // DCN Measurement Subsystems                  [David_Mills]\n    'HMP': 20, // Host Monitoring                        [RFC869][Robert_Hinden]\n    'PRM': 21, // Packet Radio Measurement                         [Zaw_Sing_Su]\n    'XNS-IDP': 22, // XEROX NS IDP       [\"The Ethernet, A Local Area Network: \n                   //                      Data Link Layer and Physical Layer\n                   //                      Specification\", AA-K759B-TK,\n                   //                      Digital Equipment Corporation,\n                   //                      Maynard, MA. Also as: \"The Ethernet \n                   //                      - A Local Area Network\",\n                   //                      Version 1.0,\n                   //                      Digital Equipment Corporation,\n                   //                      Intel Corporation, Xerox Corporation,\n                   //                      September 1980. And: \"The Ethernet,\n                   //                       A Local Area Network: Data Link\n                   //                       Layer and Physical Layer\n                   //                       Specifications\",\n                   //                      Digital, Intel and Xerox,\n                   //                      November 1982. And: XEROX,\n                   //                      \"The Ethernet, A Local Area Network: \n                   //                       Data Link Layer and Physical Layer\n                   //                       Specification\",\n                   //                      X3T51/80-50, Xerox Corporation,\n                   //                      Stamford, CT., October 1980.]\n                   //                                                  [[XEROX]]\n    'TRUNK-1': 23, // Trunk-1                                      [Barry_Boehm]\n    'TRUNK-2': 24, // Trunk-2                                      [Barry_Boehm]\n    'LEAF-1': 25, // Leaf-1                                        [Barry_Boehm]\n    'LEAF-2': 26, // Leaf-2                                        [Barry_Boehm]\n    'RDP': 27, // Reliable Data Protocol                 [RFC908][Robert_Hinden]\n    'IRTP': 28, // Internet Reliable Transaction          [RFC938][Trudy_Miller]\n    'ISO-TP4': 29, // ISO Transport Protocol Class 4 [RFC905][<mystery contact>]\n    'NETBLT': 30, // Bulk Data Transfer Protocol           [RFC969][David_Clark]\n    'MFE-NSP': 31, // MFE Network Services Protocol   [Shuttleworth, B.,\n                   //                                  \"A Documentary of MFENet,\n                   //                                   a National Computer\n                   //                                   Network\", UCRL-52317,\n                   //                                   Lawrence Livermore Labs,\n                   //                                   Livermore, California,\n                   //                                   June 1977.]\n                   //                                             [Barry_Howard]\n    'MERIT-INP': 32, // MERIT Internodal Protocol            [Hans_Werner_Braun]\n    'DCCP': 33, // Datagram Congestion Control Protocol                [RFC4340]\n    '3PC': 34, // Third Party Connect Protocol              [Stuart_A_Friedberg]\n    'IDPR': 35, // Inter-Domain Policy Routing Protocol      [Martha_Steenstrup]\n    'XTP': 36, // XTP                                             [Greg_Chesson]\n    'DDP': 37, // Datagram Delivery Protocol                      [Wesley_Craig]\n    'IDPR-CMTP': 38, // IDPR Control Message Transport Proto [Martha_Steenstrup]\n    'TP++': 39, // TP++ Transport Protocol                       [Dirk_Fromhein]\n    'IL': 40, // IL Transport Protocol                           [Dave_Presotto]\n    'IPV6': 41, // IPv6 encapsulation                                  [RFC2473]\n    'SDRP': 42, // Source Demand Routing Protocol               [Deborah_Estrin]\n    'IPV6-ROUTE': 43, // Routing Header for IPv6                 [Steve_Deering]\n    'IPV6-FRAG': 44, // Fragment Header for IPv6                 [Steve_Deering]\n    'IDRP': 45, // Inter-Domain Routing Protocol                     [Sue_Hares]\n    'RSVP': 46, // Reservation Protocol           [RFC2205][RFC3209][Bob_Braden]\n    'GRE': 47, // Generic Routing Encapsulation               [RFC1701][Tony_Li]\n    'DSR': 48, // Dynamic Source Routing Protocol                      [RFC4728]\n    'BNA': 49, // BNA                                             [Gary Salamon]\n    'ESP': 50, // Encap Security Payload                               [RFC4303]\n    'AH': 51, // Authentication Header                                 [RFC4302]\n    'I-NLSP': 52, // Integrated Net Layer Security TUBA         [K_Robert_Glenn]\n    'SWIPE': 53, // IP with Encryption                          [John_Ioannidis]\n    'NARP': 54, // NBMA Address Resolution Protocol                    [RFC1735]\n    'MOBILE': 55, // IP Mobility                               [Charlie_Perkins]\n    'TLSP': 56, // Transport Layer Security Protocol using Kryptonet key\n                // management\n                //                                              [Christer_Oberg]\n    'SKIP': 57, // SKIP                                            [Tom_Markson]\n    'ICMPV6': 58, // ICMP for IPv6                                     [RFC2460]\n    'IPV6-NONXT': 59, // No Next Header for IPv6                       [RFC2460]\n    'IPV6-OPTS': 60, // Destination Options for IPv6                   [RFC2460]\n    // 61 any host internal protocol       [Internet_Assigned_Numbers_Authority]\n    'CFTP': 62, // CFTP                                [Forsdick, H., \"CFTP\",\n                //                                      Network Message,\n                //                                      Bolt Beranek and Newman,\n                //                                      January 1982.]\n                //                                              [Harry_Forsdick]\n    // 63 any local network                [Internet_Assigned_Numbers_Authority]\n    'SAT-EXPAK': 64, // SATNET and Backroom EXPAK            [Steven_Blumenthal]\n    'KRYPTOLAN': 65, // Kryptolan                                     [Paul Liu]\n    'RVD': 66, // MIT Remote Virtual Disk Protocol           [Michael_Greenwald]\n    'IPPC': 67, // Internet Pluribus Packet Core             [Steven_Blumenthal]\n    // 68 any distributed file system      [Internet_Assigned_Numbers_Authority]\n    'SAT-MON': 69, // SATNET Monitoring                      [Steven_Blumenthal]\n    'VISA': 70, // VISA Protocol                                   [Gene_Tsudik]\n    'IPCV': 71, // Internet Packet Core Utility              [Steven_Blumenthal]\n    'CPNX': 72, // Computer Protocol Network Executive         [David Mittnacht]\n    'CPHB': 73, // Computer Protocol Heart Beat                [David Mittnacht]\n    'WSN': 74, // Wang Span Network                            [Victor Dafoulas]\n    'PVP': 75, // Packet Video Protocol                           [Steve_Casner]\n    'BR-SAT-MON': 76, // Backroom SATNET Monitoring          [Steven_Blumenthal]\n    'SUN-ND': 77, // SUN ND PROTOCOL-Temporary                  [William_Melohn]\n    'WB-MON': 78, // WIDEBAND Monitoring                     [Steven_Blumenthal]\n    'WB-EXPAK': 79, // WIDEBAND EXPAK                        [Steven_Blumenthal]\n    'ISO-IP': 80, // ISO Internet Protocol                     [Marshall_T_Rose]\n    'VMTP': 81, // VMTP                                          [Dave_Cheriton]\n    'SECURE-VMTP': 82, // SECURE-VMTP                            [Dave_Cheriton]\n    'VINES': 83, // VINES                                           [Brian Horn]\n    'TTP': 84, // TTP                                              [Jim_Stevens]\n    'IPTM': 84, // Protocol Internet Protocol Traffic Manager      [Jim_Stevens]\n    'NSFNET-IGP': 85, // NSFNET-IGP                          [Hans_Werner_Braun]\n    'DGP': 86, // Dissimilar Gateway Protocol   [M/A-COM Government Systems,\n               //                                \"Dissimilar Gateway Protocol\n               //                                 Specification, Draft Version\",\n               //                                Contract no. CS901145,\n               //                                November 16, 1987.]\n               //                                                  [Mike_Little]\n    'TCF': 87, // TCF                                       [Guillermo_A_Loyola]\n    'EIGRP': 88, // EIGRP                    [Cisco Systems,\n                 //                           \"Gateway Server Reference Manual\",\n                 //                           Manual Revision B, January 10,\n                 //                           1988.]\n                 //                          [Guenther_Schreiner]\n    'OSPFIGP': 89, // OSPFIGP              [RFC1583][RFC2328][RFC5340][John_Moy]\n    'SPRITE-RPC': 90, // Sprite RPC Protocol   [Welch, B., \"The Sprite Remote\n                      //                        Procedure Call System\",\n                      //                        Technical Report,\n                      //                        UCB/Computer Science Dept.,\n                      //                        86/302, University of California\n                      //                        at Berkeley, June 1986.]\n                      //                       [Bruce Willins]\n    'LARP': 91, // Locus Address Resolution Protocol                [Brian Horn]\n    'MTP': 92, // Multicast Transport Protocol                 [Susie_Armstrong]\n    'AX.25': 93, // AX.25 Frames                                  [Brian_Kantor]\n    'IPIP': 94, // IP-within-IP Encapsulation Protocol          [John_Ioannidis]\n    'MICP': 95, // Mobile Internetworking Control Pro.          [John_Ioannidis]\n    'SCC-SP': 96, // Semaphore Communications Sec. Pro.            [Howard_Hart]\n    'ETHERIP': 97, // Ethernet-within-IP Encapsulation                 [RFC3378]\n    'ENCAP': 98, // Encapsulation Header              [RFC1241][Robert_Woodburn]\n    // 99 any private encryption scheme    [Internet_Assigned_Numbers_Authority]\n    'GMTP': 100, // GMTP                                                [[RXB5]]\n    'IFMP': 101, // Ipsilon Flow Management Protocol                [Bob_Hinden]\n                 //                                       [November 1995, 1997.]\n    'PNNI': 102, // PNNI over IP                                   [Ross_Callon]\n    'PIM': 103, // Protocol Independent Multicast      [RFC4601][Dino_Farinacci]\n    'ARIS': 104, // ARIS                                         [Nancy_Feldman]\n    'SCPS': 105, // SCPS                                          [Robert_Durst]\n    'QNX': 106, // QNX                                          [Michael_Hunter]\n    'A/N': 107, // Active Networks                                  [Bob_Braden]\n    'IPCOMP': 108, // IP Payload Compression Protocol                  [RFC2393]\n    'SNP': 109, // Sitara Networks Protocol                 [Manickam_R_Sridhar]\n    'COMPAQ-PEER': 110, // Compaq Peer Protocol                   [Victor_Volpe]\n    'IPX-IN-IP': 111, // IPX in IP                                      [CJ_Lee]\n    'VRRP': 112, // Virtual Router Redundancy Protocol                 [RFC5798]\n    'PGM': 113, // PGM Reliable Transport Protocol               [Tony_Speakman]\n    // 114 any 0-hop protocol              [Internet_Assigned_Numbers_Authority]\n    'L2TP': 115, // Layer Two Tunneling Protocol        [RFC3931][Bernard_Aboba]\n    'DDX': 116, // D-II Data Exchange (DDX)                        [John_Worley]\n    'IATP': 117, // Interactive Agent Transfer Protocol            [John_Murphy]\n    'STP': 118, // Schedule Transfer Protocol               [Jean_Michel_Pittet]\n    'SRP': 119, // SpectraLink Radio Protocol                    [Mark_Hamilton]\n    'UTI': 120, // UTI                                          [Peter_Lothberg]\n    'SMP': 121, // Simple Message Protocol                         [Leif_Ekblad]\n    'SM': 122, // SM                                             [Jon_Crowcroft]\n    'PTP': 123, // Performance Transparency Protocol             [Michael_Welzl]\n    'ISIS': 124, // over IPv4                                  [Tony_Przygienda]\n    'FIRE': 125, //                                            [Criag_Partridge]\n    'CRTP': 126, // Combat Radio Transport Protocol             [Robert_Sautter]\n    'CRUDP': 127, // Combat Radio User Datagram                 [Robert_Sautter]\n    'SSCOPMCE': 128, //                                             [Kurt_Waber]\n    'IPLT': 129, //                                                 [[Hollbach]]\n    'SPS': 130, // Secure Packet Shield                          [Bill_McIntosh]\n    'PIPE': 131, // Private IP Encapsulation within IP          [Bernhard_Petri]\n    'SCTP': 132, // Stream Control Transmission Protocol     [Randall_R_Stewart]\n    'FC': 133, // Fibre Channel                      [Murali_Rajagopal][RFC6172]\n    'RSVP-E2E-IGNORE': 134, //                                         [RFC3175]\n    'MOBILITY HEADER': 135, //                                         [RFC6275]\n    'UDPLITE': 136, //                                                 [RFC3828]\n    'MPLS-IN-IP': 137, //                                              [RFC4023]\n    'MANET': 138, // MANET Protocols                                   [RFC5498]\n    'HIP': 139, // Host Identity Protocol                              [RFC5201]\n    'SHIM6': 140, // Shim6 Protocol                                    [RFC5533]\n    'WESP': 141, // Wrapped Encapsulating Security Payload             [RFC5840]\n    'ROHC': 142 // Robust Header Compression                           [RFC5858]\n  }\n};\nfor (var category in exports.PROTOCOL)\n  for (var protocol in exports.PROTOCOL[category])\n    exports.PROTOCOL[category][exports.PROTOCOL[category][protocol]] = protocol;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}