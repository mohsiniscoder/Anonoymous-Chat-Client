{"ast":null,"code":"var _jsxFileName = \"D:\\\\Anonymous chat app\\\\anonymous-chat\\\\client\\\\src\\\\PacketVisualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PacketVisualization = ({\n  packetData\n}) => {\n  _s();\n  var _currentPacket$layers, _currentPacket$layers2, _currentPacket$layers3, _currentPacket$layers4;\n  const [currentPacket, setCurrentPacket] = useState(null);\n  useEffect(() => {\n    if (packetData.length > 0) {\n      const newPacket = packetData[packetData.length - 1];\n      setCurrentPacket(newPacket);\n    }\n  }, [packetData]);\n  const renderLayer = (layerData, layerName) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: layerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(layerData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n  const simulatePacketCapture = () => {\n    // Simulate receiving a new packet\n    const simulatedPacket = {\n      timestamp: new Date().toISOString(),\n      size: Math.floor(Math.random() * 1500) + 50,\n      // Random size between 50 and 1500 bytes\n      layers: {\n        http: {\n          method: 'GET',\n          url: 'https://www.example.com',\n          status: 200\n          // ...other HTTP fields\n        },\n        ip: {\n          source: '192.168.1.100',\n          destination: '8.8.8.8'\n          // ...other IP fields\n        },\n        tcp: {\n          sourcePort: 80,\n          destinationPort: 80\n          // ...other TCP fields\n        },\n        frame: {\n          // ...frame-level information\n        }\n      }\n    };\n\n    // Update the packetData array\n    packetData.push(simulatedPacket);\n  };\n\n  // Simulate packet capture every 1 second\n  useEffect(() => {\n    const intervalId = setInterval(simulatePacketCapture, 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Real-Time Packet Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), currentPacket ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        border: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Packet #\", packetData.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Packet Timestamp:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), ' ', currentPacket.timestamp || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), renderLayer((_currentPacket$layers = currentPacket.layers) === null || _currentPacket$layers === void 0 ? void 0 : _currentPacket$layers.http, 'Application Layer (HTTP)'), renderLayer((_currentPacket$layers2 = currentPacket.layers) === null || _currentPacket$layers2 === void 0 ? void 0 : _currentPacket$layers2.ip, 'Network Layer (IP)'), renderLayer((_currentPacket$layers3 = currentPacket.layers) === null || _currentPacket$layers3 === void 0 ? void 0 : _currentPacket$layers3.tcp, 'Transport Layer (TCP)'), renderLayer((_currentPacket$layers4 = currentPacket.layers) === null || _currentPacket$layers4 === void 0 ? void 0 : _currentPacket$layers4.frame, 'Data Link Layer (Frame)'), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Physical Layer (Packet Size):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), ' ', `${currentPacket.size || 'N/A'} bytes`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No packets captured yet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(PacketVisualization, \"o7N+84M1YMJfoBOM1+rHzG3NKoY=\");\n_c = PacketVisualization;\nexport default PacketVisualization;\nvar _c;\n$RefreshReg$(_c, \"PacketVisualization\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","PacketVisualization","packetData","_s","_currentPacket$layers","_currentPacket$layers2","_currentPacket$layers3","_currentPacket$layers4","currentPacket","setCurrentPacket","length","newPacket","renderLayer","layerData","layerName","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","simulatePacketCapture","simulatedPacket","timestamp","Date","toISOString","size","Math","floor","random","layers","http","method","url","status","ip","source","destination","tcp","sourcePort","destinationPort","frame","push","intervalId","setInterval","clearInterval","style","marginTop","padding","border","_c","$RefreshReg$"],"sources":["D:/Anonymous chat app/anonymous-chat/client/src/PacketVisualization.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst PacketVisualization = ({ packetData }) => {\r\n  const [currentPacket, setCurrentPacket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (packetData.length > 0) {\r\n      const newPacket = packetData[packetData.length - 1];\r\n      setCurrentPacket(newPacket);\r\n    }\r\n  }, [packetData]);\r\n\r\n  const renderLayer = (layerData, layerName) => (\r\n    <div>\r\n      <h4>{layerName}</h4>\r\n      <pre>{JSON.stringify(layerData, null, 2)}</pre>\r\n    </div>\r\n  );\r\n\r\n  const simulatePacketCapture = () => {\r\n    // Simulate receiving a new packet\r\n    const simulatedPacket = {\r\n      timestamp: new Date().toISOString(),\r\n      size: Math.floor(Math.random() * 1500) + 50, // Random size between 50 and 1500 bytes\r\n      layers: {\r\n        http: {\r\n          method: 'GET',\r\n          url: 'https://www.example.com',\r\n          status: 200,\r\n          // ...other HTTP fields\r\n        },\r\n        ip: {\r\n          source: '192.168.1.100',\r\n          destination: '8.8.8.8',\r\n          // ...other IP fields\r\n        },\r\n        tcp: {\r\n          sourcePort: 80,\r\n          destinationPort: 80,\r\n          // ...other TCP fields\r\n        },\r\n        frame: {\r\n          // ...frame-level information\r\n        },\r\n      },\r\n    };\r\n\r\n    // Update the packetData array\r\n    packetData.push(simulatedPacket);\r\n  };\r\n\r\n  // Simulate packet capture every 1 second\r\n  useEffect(() => {\r\n    const intervalId = setInterval(simulatePacketCapture, 1000);\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ marginTop: '20px' }}>\r\n      <h3>Real-Time Packet Data</h3>\r\n      {currentPacket ? (\r\n        <div style={{ padding: '10px', border: '1px solid #ccc' }}>\r\n          <h4>Packet #{packetData.length}</h4>\r\n          <div>\r\n            <strong>Packet Timestamp:</strong>{' '}\r\n            {currentPacket.timestamp || 'N/A'}\r\n          </div>\r\n          {renderLayer(\r\n            currentPacket.layers?.http,\r\n            'Application Layer (HTTP)'\r\n          )}\r\n          {renderLayer(\r\n            currentPacket.layers?.ip,\r\n            'Network Layer (IP)'\r\n          )}\r\n          {renderLayer(\r\n            currentPacket.layers?.tcp,\r\n            'Transport Layer (TCP)'\r\n          )}\r\n          {renderLayer(\r\n            currentPacket.layers?.frame,\r\n            'Data Link Layer (Frame)'\r\n          )}\r\n          <div>\r\n            <strong>Physical Layer (Packet Size):</strong>{' '}\r\n            {`${currentPacket.size || 'N/A'} bytes`}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>No packets captured yet...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PacketVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}