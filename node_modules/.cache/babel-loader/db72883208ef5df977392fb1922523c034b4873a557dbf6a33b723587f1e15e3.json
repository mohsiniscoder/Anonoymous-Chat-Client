{"ast":null,"code":"// Server.js\nconst express = require('express');\nconst http = require('http');\nconst {\n  Server\n} = require('socket.io');\nconst cors = require('cors');\nconst Cap = require('cap').Cap;\nconst decoders = require('cap').decoders;\nconst PROTOCOL = decoders.PROTOCOL;\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: '*'\n  }\n});\napp.use(cors());\napp.get('/', (req, res) => {\n  res.send('Server is running...');\n});\n\n// Packet capture setup\nconst c = new Cap();\nconst device = Cap.findDevice('127.0.0.1'); // Use your specific device IP\nconst buffer = Buffer.alloc(65535);\nc.open(device, '', 10 * 1024 * 1024, buffer);\nc.setMinBytes && c.setMinBytes(0);\nc.on('packet', (nbytes, truncated) => {\n  try {\n    const ret = decoders.Ethernet(buffer);\n    if (ret.info.type === PROTOCOL.ETHERNET.IPV4) {\n      const ipv4 = decoders.IPV4(buffer, ret.offset);\n      const packet = {\n        srcAddr: ipv4.info.srcaddr,\n        dstAddr: ipv4.info.dstaddr,\n        protocol: ipv4.info.protocol\n      };\n      io.emit('packetData', packet); // Broadcast packet data to clients\n    }\n  } catch (err) {\n    console.error('Error decoding packet:', err);\n  }\n});\nio.on('connection', socket => {\n  console.log('A user connected:', socket.id);\n  socket.on('chatMessage', data => {\n    io.emit('chatMessage', data);\n  });\n  socket.on('disconnect', () => {\n    console.log('User disconnected:', socket.id);\n  });\n});\nserver.listen(3001, () => {\n  console.log('Server running on http://localhost:3001');\n});","map":{"version":3,"names":["express","require","http","Server","cors","Cap","decoders","PROTOCOL","app","server","createServer","io","origin","use","get","req","res","send","c","device","findDevice","buffer","Buffer","alloc","open","setMinBytes","on","nbytes","truncated","ret","Ethernet","info","type","ETHERNET","IPV4","ipv4","offset","packet","srcAddr","srcaddr","dstAddr","dstaddr","protocol","emit","err","console","error","socket","log","id","data","listen"],"sources":["D:/Anonymous chat app/anonymous-chat/client/src/App.jsx"],"sourcesContent":["// Server.js\nconst express = require('express');\nconst http = require('http');\nconst { Server } = require('socket.io');\nconst cors = require('cors');\nconst Cap = require('cap').Cap;\nconst decoders = require('cap').decoders;\nconst PROTOCOL = decoders.PROTOCOL;\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, { cors: { origin: '*' } });\n\napp.use(cors());\napp.get('/', (req, res) => {\n    res.send('Server is running...');\n});\n\n// Packet capture setup\nconst c = new Cap();\nconst device = Cap.findDevice('127.0.0.1'); // Use your specific device IP\nconst buffer = Buffer.alloc(65535);\n\nc.open(device, '', 10 * 1024 * 1024, buffer);\nc.setMinBytes && c.setMinBytes(0);\n\nc.on('packet', (nbytes, truncated) => {\n    try {\n        const ret = decoders.Ethernet(buffer);\n        if (ret.info.type === PROTOCOL.ETHERNET.IPV4) {\n            const ipv4 = decoders.IPV4(buffer, ret.offset);\n            const packet = {\n                srcAddr: ipv4.info.srcaddr,\n                dstAddr: ipv4.info.dstaddr,\n                protocol: ipv4.info.protocol,\n            };\n            io.emit('packetData', packet); // Broadcast packet data to clients\n        }\n    } catch (err) {\n        console.error('Error decoding packet:', err);\n    }\n});\n\nio.on('connection', (socket) => {\n    console.log('A user connected:', socket.id);\n\n    socket.on('chatMessage', (data) => {\n        io.emit('chatMessage', data);\n    });\n\n    socket.on('disconnect', () => {\n        console.log('User disconnected:', socket.id);\n    });\n});\n\nserver.listen(3001, () => {\n    console.log('Server running on http://localhost:3001');\n});\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAO,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AACvC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,GAAG,GAAGJ,OAAO,CAAC,KAAK,CAAC,CAACI,GAAG;AAC9B,MAAMC,QAAQ,GAAGL,OAAO,CAAC,KAAK,CAAC,CAACK,QAAQ;AACxC,MAAMC,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;AAElC,MAAMC,GAAG,GAAGR,OAAO,CAAC,CAAC;AACrB,MAAMS,MAAM,GAAGP,IAAI,CAACQ,YAAY,CAACF,GAAG,CAAC;AACrC,MAAMG,EAAE,GAAG,IAAIR,MAAM,CAACM,MAAM,EAAE;EAAEL,IAAI,EAAE;IAAEQ,MAAM,EAAE;EAAI;AAAE,CAAC,CAAC;AAExDJ,GAAG,CAACK,GAAG,CAACT,IAAI,CAAC,CAAC,CAAC;AACfI,GAAG,CAACM,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACvBA,GAAG,CAACC,IAAI,CAAC,sBAAsB,CAAC;AACpC,CAAC,CAAC;;AAEF;AACA,MAAMC,CAAC,GAAG,IAAIb,GAAG,CAAC,CAAC;AACnB,MAAMc,MAAM,GAAGd,GAAG,CAACe,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;AAC5C,MAAMC,MAAM,GAAGC,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;AAElCL,CAAC,CAACM,IAAI,CAACL,MAAM,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAEE,MAAM,CAAC;AAC5CH,CAAC,CAACO,WAAW,IAAIP,CAAC,CAACO,WAAW,CAAC,CAAC,CAAC;AAEjCP,CAAC,CAACQ,EAAE,CAAC,QAAQ,EAAE,CAACC,MAAM,EAAEC,SAAS,KAAK;EAClC,IAAI;IACA,MAAMC,GAAG,GAAGvB,QAAQ,CAACwB,QAAQ,CAACT,MAAM,CAAC;IACrC,IAAIQ,GAAG,CAACE,IAAI,CAACC,IAAI,KAAKzB,QAAQ,CAAC0B,QAAQ,CAACC,IAAI,EAAE;MAC1C,MAAMC,IAAI,GAAG7B,QAAQ,CAAC4B,IAAI,CAACb,MAAM,EAAEQ,GAAG,CAACO,MAAM,CAAC;MAC9C,MAAMC,MAAM,GAAG;QACXC,OAAO,EAAEH,IAAI,CAACJ,IAAI,CAACQ,OAAO;QAC1BC,OAAO,EAAEL,IAAI,CAACJ,IAAI,CAACU,OAAO;QAC1BC,QAAQ,EAAEP,IAAI,CAACJ,IAAI,CAACW;MACxB,CAAC;MACD/B,EAAE,CAACgC,IAAI,CAAC,YAAY,EAAEN,MAAM,CAAC,CAAC,CAAC;IACnC;EACJ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;EAChD;AACJ,CAAC,CAAC;AAEFjC,EAAE,CAACe,EAAE,CAAC,YAAY,EAAGqB,MAAM,IAAK;EAC5BF,OAAO,CAACG,GAAG,CAAC,mBAAmB,EAAED,MAAM,CAACE,EAAE,CAAC;EAE3CF,MAAM,CAACrB,EAAE,CAAC,aAAa,EAAGwB,IAAI,IAAK;IAC/BvC,EAAE,CAACgC,IAAI,CAAC,aAAa,EAAEO,IAAI,CAAC;EAChC,CAAC,CAAC;EAEFH,MAAM,CAACrB,EAAE,CAAC,YAAY,EAAE,MAAM;IAC1BmB,OAAO,CAACG,GAAG,CAAC,oBAAoB,EAAED,MAAM,CAACE,EAAE,CAAC;EAChD,CAAC,CAAC;AACN,CAAC,CAAC;AAEFxC,MAAM,CAAC0C,MAAM,CAAC,IAAI,EAAE,MAAM;EACtBN,OAAO,CAACG,GAAG,CAAC,yCAAyC,CAAC;AAC1D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}